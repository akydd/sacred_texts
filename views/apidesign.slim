doctype html
html
  head
    title Sacred Text
    == bootstrap_assets

body
  == slim :navbar

  .container
    h1 API Design decisions

    p There is a great 
      <a href="https://www.youtube.com/watch?v=QpAhXa12xvU">video by apigee on
      RESTful API design</a>.  I tried to incorporate the ideas presented there
      into this app.

    p Individual texts can be retrieved by specifying the chapter and verse.  The
      return type is specified by using a suffix.
      <pre>
        /bible/John/3/16.json
      </pre>

    p The base resources are the different complete bodies of text (Bible, Quran,
      etc).  Since each is unique, use their names to define the base urls.

    p Searching the resources is pretty much all that this api needs to do.  The
      parameters for performing queries are all hidden behind the ? in the url.
      For example:
      <pre>
        /bible?passage=John+3:16-Acts+2:1&type=json
        /bible?from=John+3:16&to=Acts+2:1&type=json
      </pre>

    p On error, return meaningful messages with HTTP Status Code: 401.  Messages
      could look like
      <pre>
        {"status":401, "message":"Malformed passage"}
        {"status":401, "message":"Invalid type", "code":"12", "more_info":"errors/12""}
      </pre>

    p Ok api calls always return HTTP Status Code: 200

    p Api version is mandatory.  Urls will look like
      <pre>
        v1/bible/?passage=...
      </pre>

    p There is no need to specify the return attributes, because passage lookup
      always returns the text, verse, chapter, book (when applicable).

    p Pagination will be applied for larger passages, using offset and limit.
      Offset specifies the starting record, limit specifies the number of subsequent
      records to return.  The default limit is 10.

    p The type for the returned passage lookups is determined by the user
      specified type atribute.

    p The default return type is always JSON.

    p Global search url:
      <pre>
        /bible/search?q=keyword1+keyword2
      </pre>

    p Scoped search url:
      <pre>
        /bible/John/3/search?q=keyword1
      </pre>
      Scoped searches do not make sense at the lowest detail level (verses for
      the Bible searches).

    p Formatted search url:
      <pre>
        /bible/John/3/search.json?q=keyword1
      </pre>

    p The url will be api.sacredtexts.etc...

    p Add support for suppressing non-200 HTTP response codes, even when
      response is not "ok".
      <pre>
        /bible/search.json?suppress_response_codes=true&q=Moses
      </pre>
      Then the "real" 401 HTTP response code would be pushed into the response 
      message.

    P Post, put and delete methods are not supported, so they cannot be passed
      as parameters.

    p This app needs to authentication.
